// <auto-generated />
using System;
using EXONLOG.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EXONLOG.Migrations
{
    [DbContext(typeof(EXONContext))]
    partial class EXONContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EXONLOG.Model.Account.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EXONLOG.Model.Account.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Batch", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("ShipmentID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ShipmentID");

                    b.HasIndex("UserID");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Importer", b =>
                {
                    b.Property<int>("ImporterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImporterID"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImporterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ImporterID");

                    b.HasIndex("UserID");

                    b.ToTable("Importers");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.InLading", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BatchID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstWeighDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FirstWeigherID")
                        .HasColumnType("int");

                    b.Property<double>("FirstWeight")
                        .HasColumnType("float");

                    b.Property<string>("LadingRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NetWeight")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("SecondWeighDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SecondWeigherID")
                        .HasColumnType("int");

                    b.Property<double>("SecondWeight")
                        .HasColumnType("float");

                    b.Property<int>("TransCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("TruckID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("WeightStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("BatchID");

                    b.HasIndex("DriverID");

                    b.HasIndex("FirstWeigherID");

                    b.HasIndex("SecondWeigherID");

                    b.HasIndex("TransCompanyID");

                    b.HasIndex("TruckID");

                    b.HasIndex("UserID");

                    b.ToTable("InLadings");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Shipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ImporterID")
                        .HasColumnType("int");

                    b.Property<int>("MaterialID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PortID")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("ShipmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipmentRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ShipmentStatusId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ImporterID");

                    b.HasIndex("MaterialID");

                    b.HasIndex("PortID");

                    b.HasIndex("ShipmentStatusId");

                    b.HasIndex("SupplierID");

                    b.HasIndex("UserID");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.ShipmentStatus", b =>
                {
                    b.Property<int>("ShipmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipmentStatusId"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ShipmentStatusId");

                    b.HasIndex("UserID");

                    b.ToTable("ShipmentStatuses");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Contract", b =>
                {
                    b.Property<int>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractID"));

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaterialID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("RefNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ContractID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("MaterialID");

                    b.HasIndex("UserID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("UserID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("ContractID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("ContractID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.OutLading", b =>
                {
                    b.Property<int>("LadingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LadingID"));

                    b.Property<int?>("ApprovedUserID")
                        .HasColumnType("int");

                    b.Property<int?>("BagsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("FillType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FirstWeigherID")
                        .HasColumnType("int");

                    b.Property<double>("FirstWeight")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FirstWeightDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("LadingState")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<double>("NetWeight")
                        .HasColumnType("float");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("RepresentativeName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SecondWeigherID")
                        .HasColumnType("int");

                    b.Property<double>("SecondWeight")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SecondWeightDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingCity")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Shrink")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("StackBar")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TransCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("TruckID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("WeighNotes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WeightStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LadingID");

                    b.HasIndex("DriverID");

                    b.HasIndex("FirstWeigherID");

                    b.HasIndex("OrderID");

                    b.HasIndex("SecondWeigherID");

                    b.HasIndex("TransCompanyID");

                    b.HasIndex("TruckID");

                    b.HasIndex("UserID");

                    b.ToTable("OutLadings");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Port", b =>
                {
                    b.Property<int>("PortID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PortID");

                    b.HasIndex("UserID");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.Material", b =>
                {
                    b.Property<int>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MaterialID");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("UserID");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.MaterialType", b =>
                {
                    b.Property<int>("MaterialTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialTypeID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("MaterialTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Location")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StockID");

                    b.HasIndex("MaterialId");

                    b.HasIndex("UserID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.StockMovement", b =>
                {
                    b.Property<int>("StockMovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockMovementId"));

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("QuantityChanged")
                        .HasColumnType("float");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("StockMovementId");

                    b.HasIndex("StockId");

                    b.HasIndex("UserID");

                    b.ToTable("StockMovements");
                });

            modelBuilder.Entity("EXONLOG.Model.Trans.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DriverID");

                    b.HasIndex("UserID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("EXONLOG.Model.Trans.TransCompany", b =>
                {
                    b.Property<int>("TransCompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransCompanyID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TransCompanyID");

                    b.HasIndex("UserID");

                    b.ToTable("TransCompanies");
                });

            modelBuilder.Entity("EXONLOG.Model.Trans.Truck", b =>
                {
                    b.Property<int>("TruckID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckID"));

                    b.Property<double?>("Capacity")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrailerLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrailerNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TruckType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TruckID");

                    b.HasIndex("UserID");

                    b.HasIndex("TruckNumber", "TrailerNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Truck_TruckNumber_TrailerNumber");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("EXONLOG.Model.Account.User", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Batch", b =>
                {
                    b.HasOne("EXONLOG.Model.Inbound.Shipment", "Shipment")
                        .WithMany("Batches")
                        .HasForeignKey("ShipmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Importer", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.InLading", b =>
                {
                    b.HasOne("EXONLOG.Model.Inbound.Batch", "Batch")
                        .WithMany("InLadings")
                        .HasForeignKey("BatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Trans.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "FirstWeigher")
                        .WithMany()
                        .HasForeignKey("FirstWeigherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "SecondWeigher")
                        .WithMany()
                        .HasForeignKey("SecondWeigherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Trans.TransCompany", "TransCompany")
                        .WithMany()
                        .HasForeignKey("TransCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Trans.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Driver");

                    b.Navigation("FirstWeigher");

                    b.Navigation("SecondWeigher");

                    b.Navigation("TransCompany");

                    b.Navigation("Truck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Shipment", b =>
                {
                    b.HasOne("EXONLOG.Model.Inbound.Importer", "Importer")
                        .WithMany("Shipments")
                        .HasForeignKey("ImporterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Stocks.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Outbound.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Inbound.ShipmentStatus", "ShipmentStatus")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipmentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Inbound.Supplier", "Supplier")
                        .WithMany("Shipments")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Importer");

                    b.Navigation("Material");

                    b.Navigation("Port");

                    b.Navigation("ShipmentStatus");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.ShipmentStatus", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Supplier", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Contract", b =>
                {
                    b.HasOne("EXONLOG.Model.Outbound.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Stocks.Material", "Material")
                        .WithMany("Contracts")
                        .HasForeignKey("MaterialID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Customer", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Order", b =>
                {
                    b.HasOne("EXONLOG.Model.Outbound.Contract", "Contract")
                        .WithMany("Orders")
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.OutLading", b =>
                {
                    b.HasOne("EXONLOG.Model.Trans.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "FirstWeigher")
                        .WithMany()
                        .HasForeignKey("FirstWeigherID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EXONLOG.Model.Outbound.Order", "Order")
                        .WithMany("OutLadings")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "SecondWeigher")
                        .WithMany()
                        .HasForeignKey("SecondWeigherID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EXONLOG.Model.Trans.TransCompany", "TransCompany")
                        .WithMany()
                        .HasForeignKey("TransCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Trans.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("FirstWeigher");

                    b.Navigation("Order");

                    b.Navigation("SecondWeigher");

                    b.Navigation("TransCompany");

                    b.Navigation("Truck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Port", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.Material", b =>
                {
                    b.HasOne("EXONLOG.Model.Stocks.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.MaterialType", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.Stock", b =>
                {
                    b.HasOne("EXONLOG.Model.Stocks.Material", "Material")
                        .WithMany("Stocks")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.StockMovement", b =>
                {
                    b.HasOne("EXONLOG.Model.Stocks.Stock", "Stock")
                        .WithMany("StockMovements")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Trans.Driver", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Trans.TransCompany", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Trans.Truck", b =>
                {
                    b.HasOne("EXONLOG.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Batch", b =>
                {
                    b.Navigation("InLadings");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Importer", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Shipment", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.ShipmentStatus", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("EXONLOG.Model.Inbound.Supplier", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Contract", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("EXONLOG.Model.Outbound.Order", b =>
                {
                    b.Navigation("OutLadings");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.Material", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("EXONLOG.Model.Stocks.Stock", b =>
                {
                    b.Navigation("StockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
