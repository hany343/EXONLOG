@using EXONLOG.Model.Inbound
@inject IToastService toastService

<div class="modal fade show" style="display: @(IsOpen ? "block" : "none"); background: rgba(0,0,0,0.5)">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Supplier</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Supplier" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="row g-3">
                        <!-- Supplier Name -->
                        <div class="col-md-6">
                            <label class="form-label">Supplier Name *</label>
                            <InputText class="form-control" @bind-Value="@Supplier.SupplierName" />
                            <ValidationMessage For="@(() => Supplier.SupplierName)" />
                        </div>

                        <!-- Supplier Type -->
                        <div class="col-md-6">
                            <label class="form-label">Supplier Type *</label>
                            <InputSelect @bind-Value="@Supplier.Type" class="form-control">
                                <option value="@SupplierType.Manufacturer">Manufacturer</option>
                                <option value="@SupplierType.Distributor">Distributor</option>
                                <option value="@SupplierType.Wholesaler">Wholesaler</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => Supplier.Type)" />
                        </div>

                        <!-- Address -->
                        <div class="col-md-6">
                            <label class="form-label">Address</label>
                            <InputText class="form-control" @bind-Value="@Supplier.Address" />
                        </div>

                        <!-- Contact Number -->
                        <div class="col-md-6">
                            <label class="form-label">Contact Number</label>
                            <InputText class="form-control" @bind-Value="@Supplier.ContactNumber" />
                        </div>

                        <!-- Email -->
                        <div class="col-md-6">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="@Supplier.Email" />
                        </div>

                        <!-- Notes -->
                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <InputTextArea class="form-control" @bind-Value="@Supplier.Notes" />
                        </div>

                        <!-- Buttons -->
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Supplier Supplier { get; set; } = new();

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<Supplier> OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task HandleSubmit()
    {
        try
        {
            await OnSave.InvokeAsync(Supplier);
            toastService.ShowSuccess("Supplier updated successfully.");
            CloseModal();
        }
        catch (Exception ex)
        {
            toastService.ShowError("Failed to update supplier. Please try again.");
            Console.Error.WriteLine(ex.Message);
        }
    }

    private void CloseModal()
    {
        IsOpen = false;
        IsOpenChanged.InvokeAsync(false);
        OnCancel.InvokeAsync();
    }
}