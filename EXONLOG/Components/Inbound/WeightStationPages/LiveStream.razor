@page "/live-stream"
@inject IJSRuntime JSRuntime
@inject FFmpegService FFmpegService

<button @onclick="StartContinuousScreenshots">Start Continuous Screenshots</button>
<button @onclick="StopContinuousScreenshots">Stop Continuous Screenshots</button>

@if (_showImage)
{
    <img src="/screenshots/latest.jpg?t=@_timestamp" alt="Latest Screenshot" style="width: 480px;" />
    <div>
        <video id="hls-video" class="video-js vjs-default-skin" controls width="640" height="360">
            <source src="/stream/stream.m3u8" type="application/x-mpegURL" />
        </video>
    </div>
}

@code {
    private string _rtspUrl = "rtsp://admin:alex123%21%40%23%26@192.168.49.13:554/Streaming/Channels/101";
    private string _outputPath = Path.Combine("wwwroot", "screenshots", "latest.jpg");
    private bool _showImage = true;
    private string _timestamp = DateTime.Now.Ticks.ToString();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure the output directory exists
            //Directory.CreateDirectory(Path.GetDirectoryName(_outputPath));
            //await JSRuntime.InvokeVoidAsync("toggleVlcMute");
            await JSRuntime.InvokeVoidAsync("initializeVideoPlayer");
        }
    }

    private async Task StartContinuousScreenshots()
    {
        await FFmpegService.StartContinuousScreenshotsAsync(_rtspUrl, _outputPath, UpdateImage);
    }

    private void StopContinuousScreenshots()
    {
        FFmpegService.StopContinuousScreenshots();
    }

    private void UpdateImage()
    {
        // Update the timestamp to force the browser to reload the image
        _timestamp = DateTime.Now.Ticks.ToString();
        StateHasChanged();
    }

    public void Dispose()
    {
        FFmpegService.Dispose();
    }
}