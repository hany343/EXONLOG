
@page "/weightstation"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@implements IAsyncDisposable
@inject HttpClient Http
@inject InLadingService inLadingService
<!-- Error Message -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
@if (!isBrowserSupported)
{
    <div class="alert alert-warning">
        Your browser does not support the Web Serial API. Please use Chrome, Edge, or Opera.
    </div>
}
<div class="d-flex flex-wrap  mw-100">

    <div class=" col-lg-7 d-flex  ">
        <!-- Live Weight Display -->
        <div class="weight-display col-lg-10">
            <div class="black-screen">
                <span class="weight-value">@currentWeight.ToString("N2") kg</span>
            </div>
        </div>

        <div class="col-lg-2">
            <!-- Controls Section -->
            <div class="controls-section d-flex gap-2 flex-column align-content-center justify-content-around ">
                <button @onclick="InitializeScale"
                        class="btn btn-primary"
                        disabled="@isScaleInitialized">
                    Connect
                </button>

                <button @onclick="ConfirmWeight"
                        class="btn btn-success"
                        disabled="@(!isWeightStable || !isScaleInitialized)">
                    Confirm
                </button>
            </div>
        </div>

    </div>
    <div class="summary-box bg-light  ">
        <div class="d-flex flex-wrap justify-content-between col-lg-5 summary-display">
            <div class="col-md-4 p-4" >
                <span class="barcode m-auto">@currentInLading.InLadingID</span>
            </div>
            <div class="col-md-8 d-flex gap-2 justify-content-between " style="font-size:14px">

                <div class="d-flex flex-column gap-2 ">
                    <div> <strong>Material:</strong> @MaterialName</div>
                    <div><strong> Quantity:</strong> @currentInLading.Quantity.ToString("N2") Ton</div>
                </div>
                <div class="d-flex flex-column gap-2 ">
                    <div><strong>Truck:</strong> @currentInLading.Truck?.TruckNumber</div>
                    <div><strong>Driver:</strong> @currentInLading.Driver?.DriverName</div>
                </div>
            </div>

        </div>
    </div>

</div>


<div class="d-flex flex-wrap g-3 mw-100 ">

    <!-- Camera Preview -->
    <div class="camera-preview col-lg-6 p-3 rounded ">
        @if (showCamera)
        {
            <LiveStream ></LiveStream>
        }
        else
        {
            <div class="camera-placeholder">Camera Offline</div>
        }
    </div>
    <div class="col-lg-6 p-3">
        <!-- Weight Input Section -->
        <div class="card mb-4">
            <div class="card-body">
                <EditForm Model="@currentInLading" OnValidSubmit="HandleWeighSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-3">
                        @if (currentInLading.WeightStatus == WeightStatus.Pending ||
                          currentInLading.WeightStatus == WeightStatus.FirstWeighCompleted)
                        {
                            <div class="col-md-6">
                                <label class="form-label">First Weight (kg)</label>
                                <InputNumber @bind-Value="@currentInLading.FirstWeight"
                                             class="form-control"
                                             min="0" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">First Weigh Date</label>
                                <InputDate @bind-Value="@currentInLading.FirstWeighDate"
                                           class="form-control" />
                            </div>
                        }

                        @if (currentInLading.WeightStatus == WeightStatus.FirstWeighCompleted)
                        {
                            <div class="col-md-6">
                                <label class="form-label">Second Weight (kg)</label>
                                <InputNumber @bind-Value="@currentInLading.SecondWeight"
                                             class="form-control"
                                             min="0" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Second Weigh Date</label>
                                <InputDate @bind-Value="@currentInLading.SecondWeighDate"
                                           class="form-control" />
                            </div>
                        }

                        @if (currentInLading.WeightStatus == WeightStatus.SecondWeighCompleted)
                        {
                            <div class="col-md-6">
                                <strong>Net Weight:</strong>
                                @currentInLading.NetWeight.ToString("N2") kg
                            </div>
                            <div class="col-md-6">
                                <strong>Shrinkage:</strong>
                                @CalculateShrinkage().ToString("N2") kg
                            </div>
                        }

                        <div class="col-md-6">
                            <label class="form-label">Weigh Station</label>
                            <InputSelect @bind-Value="@selectedWeighStation" class="form-control">
                                <option value="">Select Weigh Station</option>
                                @*@foreach (var station in weighStations)
        {
            <option value="@station.Id">@station.Name</option>
        }*@
                            </InputSelect>
                        </div>

                        <div class="col-12">
                            <label>Comments</label>
                            <textarea @bind="currentInLading.Notes" class="form-control" rows="3"></textarea>
                        </div>

                        <div class="col-12">
                            <button type="submit" class="btn btn-primary"
                                    disabled="@(!isWeightStable && currentInLading.WeightStatus != WeightStatus.Verified)">
                                @GetButtonText()
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="form-group">
    <label>Weight Notes:</label>
    <textarea @bind="weightNotes" class="form-control" rows="3"></textarea>
</div>

<button @onclick="ConfirmWeight"
        class="btn btn-primary"
        disabled="@(!isWeightStable)">
    Confirm Weight (@timerCountdown)
</button>

<button @onclick="ToggleCamera" class="btn btn-secondary">
    @(showCamera ? "Hide Camera" : "Show Camera")
</button>



@code {
    private InLading currentInLading { set; get; }=new();
    //private List<WeighStation> weighStations = new();
    private int selectedWeighStation;
    private decimal currentWeight;
    private bool isWeightStable;

    private string selectedLadingType = "Inbound";
    private string MaterialName = "";
    private string weightNotes = string.Empty;
    private int timerCountdown = 5;
    private bool showCamera = true;
    private DotNetObjectReference<WeightStation> objRef;
    private IJSObjectReference? weightModule;

    private bool isScaleInitialized;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        currentInLading =  inLadingService.GetInLadingByIdAsync(12500003);
        //weighStations = await InLadingService.GetWeighStations();
        MaterialName = GetMaterialName();
    }

    private string GetMaterialName()
    {
        return currentInLading?.Batch?.Shipment?.Material?.MaterialName ?? "N/A";
    }

    private double CalculateShrinkage()
    {
        if (currentInLading?.Batch == null) return 0;
        return currentInLading.Batch.Quantity - currentInLading.NetWeight;
    }

    private string GetButtonText()
    {
        return currentInLading.WeightStatus switch
        {
            WeightStatus.Pending => "Save First Weigh",
            WeightStatus.FirstWeighCompleted => "Save Second Weigh",
            _ => "Save Changes"
        };
    }

    private async Task HandleWeighSubmit()
    {
        try
        {
            switch (currentInLading.WeightStatus)
            {
                case WeightStatus.Pending:
                    currentInLading.FirstWeight = (double)currentWeight;
                    currentInLading.FirstWeighDate = DateTime.UtcNow;
                    currentInLading.WeightStatus = WeightStatus.FirstWeighCompleted;
                    currentInLading.FirstWeigherID = await GetCurrentUserId();
                    currentInLading.FirstWeighStation = "FirstWS";
                    break;

                case WeightStatus.FirstWeighCompleted:
                    currentInLading.SecondWeight = (double)currentWeight;
                    currentInLading.SecondWeighDate = DateTime.UtcNow;
                    currentInLading.WeightStatus = WeightStatus.SecondWeighCompleted;
                    currentInLading.SecondWeigherID = await GetCurrentUserId();
                    currentInLading.SecondWeighStation = "SecondWS";
                    break;
            }

            await inLadingService.UpdateInLadingAsync(currentInLading);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving weight data: {ex.Message}";
        }
    }

    private async Task<int> GetCurrentUserId()
    {
        // Implement user authentication logic
        return 1; // Example user ID
    }

    private async Task InitializeScale()
    {
        try
        {
            await weightModule!.InvokeVoidAsync(
                "initializeScale",
                objRef,
                "COM3", // Configure port
                9600);

            isScaleInitialized = true;
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initialize scale: {ex.Message}";
        }
    }
    private string cameraError = string.Empty;




    [JSInvokable]
    public void UpdateWeight(decimal weight)
    {
        currentWeight = weight;
        isWeightStable = CheckWeightStability();
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleSerialError(string message)
    {
        errorMessage = $"Serial port error: {message}";
        StateHasChanged();
    }

    private bool CheckWeightStability()
    {
        // Implement weight stabilization logic
        return true;
    }

    private async Task ConfirmWeight()
    {
        // Save weight data
        await ResetScale();
    }

    private async Task ResetScale()
    {
        await weightModule!.InvokeVoidAsync("resetScale");
        currentWeight = 0;
    }

    public async ValueTask DisposeAsync()
    {
        if (weightModule != null)
        {
            await weightModule.DisposeAsync();
        }
        objRef?.Dispose();
    }
    private void ToggleCamera()
    {
        showCamera = !showCamera;
    }


    private bool isBrowserSupported = true;


}
