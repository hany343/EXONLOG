@page "/batches"
@inject BatchService batchService
@inject ShipmentService shipmentService
@using Model.Inbound
@inject NavigationManager Navigation

<PageTitle>Batch Management</PageTitle>

<div class="container mt-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Batch Management</h3>
        <button class="btn btn-primary" @onclick="ToggleAddForm">
            @(showAddForm ? "Cancel" : "+ New Batch")
        </button>
    </div>

    <!-- Search Bar -->
    <div class="mb-4">
        <input type="text" class="form-control" placeholder="Search batches..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>

    <!-- Add Batch Form -->
    @if (showAddForm)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">New Batch</h5>
                <EditForm Model="@newBatch" OnValidSubmit="HandleAddSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Shipment *</label>
                            <select class="form-control"  @onchange="LoadAvailableQuantity">
                                <option value="">Select Shipment</option>
                                @foreach (var shipment in shipments)
                                {
                                    <option value="@shipment.ShipmentID">
                                        @shipment.Material.MaterialName - @shipment.Quantity.ToString("N2")
                                    </option>
                                }
                            </select>
                            <ValidationMessage For="@(() => newBatch.ShipmentID)" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Available Quantity</label>
                            <input class="form-control"
                                   value="@availableQuantity.ToString("N2")"
                                   disabled />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Batch Quantity *</label>
                            <InputNumber @bind-Value="@newBatch.Quantity"
                                         class="form-control"
                                         min="0.01"
                                         step="0.01" />
                            <ValidationMessage For="@(() => newBatch.Quantity)" />
                            @if (quantityError)
                            {
                                <div class="text-danger">Quantity exceeds available quantity!</div>
                            }
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Batch Number</label>
                            <InputText class="form-control" @bind-Value="@newBatch.BatchNumber" />
                        </div>

                        <div class="col-12">
                            <button type="submit" class="btn btn-success">Create Batch</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <!-- Batches Table -->
    <div class="table-responsive">
        <table class="table table-hover table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Batch Number</th>
                    <th>Material</th>
                    <th>Quantity</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var batch in filteredBatches)
                {
                    <tr>
                        <td>@batch.BatchNumber</td>
                        <td>@batch.Shipment.Material.MaterialName</td>
                        <td>@batch.Quantity</td>
                        <td>@batch.CreateDate.ToString("dd MMM yyyy")</td>
                        <td>
                            <button class="btn btn-sm btn-warning"
                                    @onclick="() => ShowEditModal(batch)">
                                <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-sm btn-danger"
                                    @onclick="() => DeleteBatch(batch.ID)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Modal -->
@if (showEditModal)
{
    <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5)">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Batch</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@selectedBatch" OnValidSubmit="HandleEditSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Shipment</label>
                                <input class="form-control"
                                       value="@selectedBatch.Shipment.Material.MaterialName"
                                       disabled />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Available Quantity</label>
                                <input class="form-control"
                                       value="@(selectedBatch.Shipment.Quantity - selectedBatch.Shipment.Batches.Sum(b => b.Quantity) + selectedBatch.Quantity)"
                                       disabled />
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Batch Quantity *</label>
                                <InputNumber @bind-Value="@selectedBatch.Quantity"
                                             class="form-control"
                                             min="0.01"
                                             step="0.01" />
                                <ValidationMessage For="@(() => selectedBatch.Quantity)" />
                                @if (quantityError)
                                {
                                    <div class="text-danger">Quantity exceeds available quantity!</div>
                                }
                            </div>

                            <div class="col-md-6">
                                <label class="form-label">Batch Number</label>
                                <InputText class="form-control" @bind-Value="@selectedBatch.BatchNumber" />
                            </div>

                            <div class="col-12">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Batch> batches = new();
    private List<Batch> filteredBatches = new();
    private List<Shipment> shipments = new();
    private string searchTerm = string.Empty;
    private bool showAddForm;
    private bool showEditModal;
    private bool quantityError;
    private double availableQuantity;

    private Batch newBatch = new();
    private Batch selectedBatch = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        batches = await batchService.GetBatchesAsync();
        shipments = await shipmentService.GetAllShipmentsAsync();
        FilterBatches();
    }

    private async Task LoadAvailableQuantity(ChangeEventArgs e)
    {
        string bID = e.Value.ToString();

        newBatch.ShipmentID = int.Parse(bID);
        selectedBatch.ShipmentID = newBatch.ShipmentID;
        availableQuantity = await batchService.GetAvailableQuantityAsync(newBatch.ShipmentID);
        quantityError = newBatch.Quantity > availableQuantity;
        StateHasChanged();
    }

    private void FilterBatches()
    {
        filteredBatches = batches
            .Where(b => string.IsNullOrEmpty(searchTerm) ||
                b.BatchNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                b.Shipment.Material.MaterialName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task HandleAddSubmit()
    {
        var currentAvailable = await batchService.GetAvailableQuantityAsync(newBatch.ShipmentID);
        if (newBatch.Quantity > currentAvailable)
        {
            quantityError = true;
            return;
        }
        newBatch.UserID = 1;
        await batchService.AddBatchAsync(newBatch);
        await LoadData();
        showAddForm = false;
        ResetForm();
    }

    private void ResetForm()
    {
        newBatch = new Batch();
        availableQuantity = 0;
        quantityError = false;
    }

    private void ShowEditModal(Batch batch)
    {
        selectedBatch = batch;
        showEditModal = true;
    }

    private async Task HandleEditSubmit()
    {
        var currentAvailable = await batchService.GetAvailableQuantityAsync(selectedBatch.ShipmentID) + selectedBatch.Quantity;
        if (selectedBatch.Quantity > currentAvailable)
        {
            quantityError = true;
            return;
        }

        await batchService.UpdateBatchAsync(selectedBatch);
        await LoadData();
        showEditModal = false;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedBatch = new Batch();
        quantityError = false;
    }

    private async Task DeleteBatch(int batchId)
    {
        await batchService.DeleteBatchAsync(batchId);
        await LoadData();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (showAddForm) newBatch = new();
    }
}