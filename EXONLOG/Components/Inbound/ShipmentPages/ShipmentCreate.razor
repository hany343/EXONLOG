@using EXONLOG.Model.Inbound
@using Model.Stocks
@inject ShipmentService shipmentService
@inject MaterialService materialService
@inject SupplierService supplierService
@inject PortService portService

<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">New Shipment</h5>
        <EditForm Model="@newShipment" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />


            <!-- Form fields go here (same as in the original code) -->

            <div class="row g-3">

                <div class="col-md-6">
                    <label class="form-label">Shipment Name *</label>
                    <InputText @bind-Value="@newShipment.ShipmentName" class="form-control" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Material *</label>
                    <select class="form-control" @onchange="LoadFreeQuantity">
                        <option value="">Select Material</option>
                        @foreach (var material in materials)
                        {
                            <option value="@material.MaterialID">@material.MaterialName</option>
                        }
                    </select>
                    <ValidationMessage For="@(() => newShipment.MaterialID)" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Available Quantity</label>
                    <input class="form-control"
                           value="@freeQuantity.ToString("N2")"
                           disabled />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Quantity *</label>
                    <InputNumber @bind-Value="@newShipment.Quantity"
                                 class="form-control"
                                 min="0" />
                    <ValidationMessage For="@(() => newShipment.Quantity)" />
                    @if (quantityError)
                    {
                        <div class="text-danger">Quantity exceeds available stock!</div>
                    }
                </div>

                <!-- Add other shipment fields (Supplier, ShipmentDate, etc.) -->
                <div class="col-md-6">
                    <label class="form-label">Supplier *</label>
                    <InputSelect @bind-Value="@newShipment.SupplierID" class="form-control">
                        <option value="">Select Supplier</option>
                        @foreach (var supplier in suppliers)
                        {
                            <option value="@supplier.ID">@supplier.SupplierName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => newShipment.SupplierID)" />
                </div>


                <!-- Add other shipment fields (Ports, ShipmentDate, etc.) -->
                <div class="col-md-6">
                    <label class="form-label">Port *</label>
                    <InputSelect @bind-Value="@newShipment.PortID" class="form-control">
                        <option value="">Select Port</option>
                        @foreach (var port in ports)
                        {
                            <option value="@port.PortID">@port.PortName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => newShipment.PortID)" />
                </div>


                <div class="col-md-6">
                    <label class="form-label">Shipment Date *</label>
                    <InputDate @bind-Value="@newShipment.CreateDate" class="form-control" />
                    <ValidationMessage For="@(() => newShipment.CreateDate)" />
                </div>

              
            </div>

            <div class="col-12">
                <button type="submit" class="btn btn-success">Create Shipment</button>
                <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<Shipment> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private Shipment newShipment = new();

    private List<Material> materials = new();
    private List<Supplier> suppliers = new();
    private List<Port> ports = new();
    private double freeQuantity;
    private bool quantityError;


    private async Task HandleSubmit()
    {
        var currentFreeQty = materialService.GetFreeQuantityAsync(newShipment.MaterialID);
        if (newShipment.Quantity > currentFreeQty)
        {
            quantityError = true;
            return;
        }
        await OnSubmit.InvokeAsync(newShipment);
        newShipment = new Shipment();
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        materials = await materialService.GetMaterialsAsync();
        suppliers = await supplierService.GetSuppliersAsync();
        ports = await portService.GetPortsAsync();

    }
    private void LoadFreeQuantity(ChangeEventArgs e)
    {
        string MID = e.Value.ToString();

        newShipment.MaterialID = int.Parse(MID);

        freeQuantity = materialService.GetFreeQuantityAsync(newShipment.MaterialID);
        //quantityError = newShipment.Quantity > freeQuantity;
        StateHasChanged();
    }
}