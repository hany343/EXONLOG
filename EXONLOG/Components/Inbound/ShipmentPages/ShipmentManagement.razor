@page "/ShipmentsManagement"
@inject ShipmentService shipmentService
@inject MaterialService materialService
@inject SupplierService supplierService
@inject PortService portService

<PageTitle>Shipment Management</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Shipment Management</h3>
        <button class="btn btn-primary" @onclick="OpenCreateModal">+ New Shipment</button>
    </div>

    <div class="mb-4">
        <input type="text" class="form-control" placeholder="Search shipments..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>

    @if (showCreateModal)
    {
        <CreateShipment IsOpen="showCreateModal"
                        OnSave="HandleCreateSubmit"
                        OnCancel="CloseCreateModal" />
    }

    @if (showEditModal)
    {
        <EditShipment Shipment="selectedShipment"
                      @bind-IsOpen="showEditModal"
                      OnSave="HandleEditSubmit"
                      OnCancel="CloseEditModal" />
    }

    @if (showDetailsModal)
    {
        <ShipmentDetails Shipment="selectedShipment"
                         @bind-IsOpen="showDetailsModal" />
    }

    <ShipmentList Shipments="filteredShipments"
                  OnEdit="OpenEditModal"
                  OnDetails="OpenDetailsModal"
                  OnDelete="DeleteShipment" />
</div>

@code {
    private List<Shipment> shipments = new();
    private List<Shipment> filteredShipments = new();
    private string searchTerm = string.Empty;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showDetailsModal = false;
    private Shipment selectedShipment = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        shipments = await shipmentService.GetAllShipmentsAsync();
        FilterShipments();
    }

    private void FilterShipments()
    {
        filteredShipments = shipments.Where(s =>
            string.IsNullOrEmpty(searchTerm) ||
            s.ShipmentName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            s.ShipmentRef.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private void OpenCreateModal() => showCreateModal = true;

    private async Task HandleCreateSubmit(Shipment newShipment)
    {
        await shipmentService.CreateShipmentAsync(newShipment);
        await LoadData();
        showCreateModal = false;
    }

    private void CloseCreateModal() => showCreateModal = false;

    private void OpenEditModal(Shipment shipment)
    {
        selectedShipment = shipment;
        showEditModal = true;
    }

    private async Task HandleEditSubmit(Shipment updatedShipment)
    {
        await shipmentService.UpdateShipmentAsync(updatedShipment);
        await LoadData();
        showEditModal = false;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedShipment = new Shipment();
    }

    private async Task DeleteShipment(int id)
    {
        await shipmentService.DeleteShipmentAsync(id);
        await LoadData();
    }

    private void OpenDetailsModal(Shipment shipment)
    {
        selectedShipment = shipment;
        showDetailsModal = true;
    }
}