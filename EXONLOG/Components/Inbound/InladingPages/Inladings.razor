@page "/inladings"
@inject InLadingService inLadingService
@inject BatchService batchService
@inject TransCompanyService transCompanyService
@using Model.Inbound

<PageTitle>InLading Management</PageTitle>

<div class="container mt-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>InLading Management</h3>
        <button class="btn btn-primary" @onclick="ToggleAddForm">
            @(showAddForm ? "Cancel" : "+ New InLading")
        </button>
    </div>

    <!-- Search Bar -->
    <div class="mb-4">
        <input type="text" class="form-control" placeholder="Search inladings..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>

    <!-- Add InLading Form -->
    @if (showAddForm)
    {
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">New InLading</h5>
                <EditForm Model="@newInLading" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Batch *</label>
                            <InputSelect @bind-Value="@newInLading.BatchID" class="form-control">
                                <option value="">Select Batch</option>
                                @foreach (var batch in batches)
                                {
                                    <option value="@batch.ID">@batch.BatchNumber</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newInLading.BatchID)" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Trans Company *</label>
                            <InputSelect @bind-Value="@newInLading.TransCompanyID" class="form-control">
                                <option value="">Select Trans Company</option>
                                @foreach (var company in transCompanies)
                                {
                                    <option value="@company.TransCompanyID">@company.CompanyName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newInLading.TransCompanyID)" />
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Driver *</label>
                            <SearchDriver OnDriverSelected="HandleDriverSelected" />
                            @if (selectedDriver != null)
                            {
                                <div class="selected-item">
                                    Selected: @selectedDriver.DriverName (@selectedDriver.NationalID)
                                </div>
                            }
                        </div>

                        <div class="col-md-6">
                            <label class="form-label">Truck *</label>
                            <SearchTruck OnTruckSelected="HandleTruckSelected" />
                            @if (selectedTruck != null)
                            {
                                <div class="selected-item">
                                    Selected: @selectedTruck.TruckNumber
                                </div>
                            }
                        </div>

                        <div class="col-12">
                            <label class="form-label">Notes</label>
                            <InputTextArea class="form-control" @bind-Value="@newInLading.Notes" />
                        </div>

                        <div class="col-12">
                            <button type="submit" class="btn btn-success">Create InLading</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <!-- InLadings Table -->
    <div class="table-responsive">
        <table class="table table-hover table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Lading ID</th>
                    <th>Batch</th>
                    <th>Truck</th>
                    <th>Driver</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var inLading in filteredInLadings)
                {
                    <tr>
                        <td>@inLading.InladID</td>
                        <td>@inLading.Batch?.BatchNumber</td>
                        <td>@inLading.Truck?.TruckNumber</td>
                        <td>@inLading.Driver?.DriverName</td>
                        <td>@inLading.CreateDate.ToString("dd MMM yyyy")</td>
                        <td>
                            <button class="btn btn-sm btn-danger"
                                    @onclick="() => DeleteInLading(inLading.InladID)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<InLading> inLadings = new();
    private List<InLading> filteredInLadings = new();
    private List<Batch> batches = new();
    private List<TransCompany> transCompanies = new();
    private string searchTerm = string.Empty;
    private bool showAddForm;

    private InLading newInLading = new();
    private Driver? selectedDriver;
    private Truck? selectedTruck;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        inLadings = await inLadingService.GetAllInLadingsAsync(searchTerm);
        batches = await batchService.GetBatchesAsync();
        transCompanies = await transCompanyService.GetAllAsync();
        FilterInLadings();
    }

    private void FilterInLadings()
    {
        filteredInLadings = inLadings
            .Where(i => string.IsNullOrEmpty(searchTerm) ||

                i.Batch.BatchNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void HandleDriverSelected(Driver driver)
    {
        selectedDriver = driver;
        newInLading.DriverID = driver.DriverID;
    }

    private void HandleTruckSelected(Truck truck)
    {
        selectedTruck = truck;
        newInLading.TruckID = truck.TruckID;
    }

    private async Task HandleSubmit()
    {
        await inLadingService.CreateInLadingAsync(newInLading);
        await LoadData();
        showAddForm = false;
        ResetForm();
    }

    private void ResetForm()
    {
        newInLading = new InLading();
        selectedDriver = null;
        selectedTruck = null;
    }

    private async Task DeleteInLading(int id)
    {
        // await inLadingService.DeleteInLadingAsync(id);
        await LoadData();
    }

    private void ToggleAddForm()
    {
        showAddForm = !showAddForm;
        if (showAddForm) newInLading = new();
    }
}