@page "/InladingsManagement"
@inject InLadingService inLadingService
@inject BatchService batchService
@inject TransCompanyService transCompanyService
@using Model.Inbound

<PageTitle>InLading Management</PageTitle>

<div class="container mt-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>InLading Management</h3>
        <button class="btn btn-primary" @onclick="OpenCreateModal">
            + New InLading
        </button>
    </div>

    <!-- Search Bar -->
    <div class="mb-4">
        <input type="text" class="form-control" placeholder="Search inladings..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>

    <!-- Create Modal -->
    @if (showCreateModal)
    {
        <CreateInLading IsOpen="showCreateModal"
                        OnSave="HandleCreateSubmit"
                        OnCancel="CloseCreateModal" /> <!-- Bind OnCancel here -->
    }

    <!-- Edit Modal -->
    @if (showEditModal)
    {
        <EditInLading InLading="selectedInLading"
                      @bind-IsOpen="showEditModal"
                      OnSave="HandleEditSubmit"
                      OnCancel="CloseEditModal" />
    }

    <!-- Details Modal -->
    @if (showDetailsModal)
    {
        <InLadingDetails InLading="selectedInLading"
                         @bind-IsOpen="showDetailsModal" />
    }

    <!-- InLadings Table -->
    <InLadingList InLadings="filteredInLadings"
                  OnEdit="OpenEditModal"
                  OnDetails="OpenDetailsModal"
                  OnDelete="DeleteInLading" />
</div>

@code {
    private List<InLading> inLadings = new();
    private List<InLading> filteredInLadings = new();
    private string searchTerm = string.Empty;
    private bool showCreateModal=false;
    private bool showEditModal = false;
    private InLading selectedInLading = new();
    private bool showDetailsModal =false;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        inLadings = await inLadingService.GetAllInLadingsAsync();
        FilterInLadings();
    }

    private void FilterInLadings()
    {
        filteredInLadings = inLadings
            .Where(i => string.IsNullOrEmpty(searchTerm) ||
                i.Batch.BatchNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void OpenCreateModal()
    {
        showCreateModal = true;
    }

    private async Task HandleCreateSubmit(InLading newInLading)
    {
        await inLadingService.CreateInLadingAsync(newInLading);
        await LoadData();
        showCreateModal = false;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private void OpenEditModal(InLading inLading)
    {
        selectedInLading = inLading;
        showEditModal = true;
    }

    private async Task HandleEditSubmit(InLading updatedInLading)
    {
        await inLadingService.UpdateInLadingAsync(updatedInLading);
        await LoadData();
        showEditModal = false;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedInLading = new InLading();
    }

    private async Task DeleteInLading(int id)
    {
        await inLadingService.DeleteInLadingAsync(id);
        await LoadData();
    }
    // Add this method
    private void OpenDetailsModal(InLading inLading)
    {
        //selectedInLading = inLading;
        selectedInLading=  inLadingService.GetInLadingByIdAsync(inLading.InLadingID);
        showDetailsModal = true;
    }
}