@page "/BatchesManagement"
@inject BatchService batchService
@inject ShipmentService shipmentService

<PageTitle>Batch Management</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Batch Management</h3>
        <button class="btn btn-primary" @onclick="OpenCreateModal">+ New Batch</button>
    </div>

    <div class="mb-4">
        <input type="text" class="form-control" placeholder="Search batches..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>

    @if (showCreateModal)
    {
        <CreateBatch IsOpen="showCreateModal"
                     OnSave="HandleCreateSubmit"
                     OnCancel="CloseCreateModal" />
    }

    @if (showEditModal)
    {
        <EditBatch Batch="selectedBatch"
                   @bind-IsOpen="showEditModal"
                   OnSave="HandleEditSubmit"
                   OnCancel="CloseEditModal" />
    }

    @if (showDetailsModal)
    {
        <BatchDetails Batch="selectedBatch"
                      @bind-IsOpen="showDetailsModal" />
    }

    <BatchList Batches="filteredBatches"
               OnEdit="OpenEditModal"
               OnDetails="OpenDetailsModal"
               OnDelete="DeleteBatch" />
</div>

@code {
    private List<Batch> batches = new();
    private List<Batch> filteredBatches = new();
    private string searchTerm = string.Empty;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private bool showDetailsModal = false;
    private Batch selectedBatch = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData() => filteredBatches = batches = await batchService.GetAllBatchesAsync();

    private void FilterBatches() => filteredBatches = batches
        .Where(b => string.IsNullOrEmpty(searchTerm) ||
                   b.BatchNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();

    private void OpenCreateModal() => showCreateModal = true;

    private async Task HandleCreateSubmit(Batch newBatch)
    {
        await batchService.CreateBatchAsync(newBatch);
        await LoadData();
        showCreateModal = false;
    }

    private void CloseCreateModal() => showCreateModal = false;

    private void OpenEditModal(Batch batch)
    {
        selectedBatch = batch;
        showEditModal = true;
    }

    private async Task HandleEditSubmit(Batch updatedBatch)
    {
        await batchService.UpdateBatchAsync(updatedBatch);
        await LoadData();
        showEditModal = false;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedBatch = new Batch();
    }

    private async Task DeleteBatch(int id)
    {
        await batchService.DeleteBatchAsync(id);
        await LoadData();
    }

    private void OpenDetailsModal(Batch batch)
    {
        selectedBatch = batch;
        showDetailsModal = true;
    }
}