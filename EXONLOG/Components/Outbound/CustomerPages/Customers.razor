@page "/Customers"
@using EXONLOG.Services
@using EXONLOG.Model.Outbound

@inject CustomerService CustomerService
@rendermode InteractiveServer

@inject IJSRuntime JSRuntime

<h3>Customer Management</h3>

<!-- Header with Create Button -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateForm">Create New Customer</button>

    <!-- Filter Section -->
    <div class="d-flex align-items-center">
        <input class="form-control me-2" type="text" placeholder="Search by Name" @bind="SearchTerm" />
        <button class="btn btn-secondary" @onclick="ApplyFilter">Search</button>
    </div>
</div>

<!-- Create Customer Form -->
@if (ShowForm)
{
    <div class="card p-3 mb-4">
        <h5>Create New Customer</h5>
        <EditForm Model="@newCustomer" OnValidSubmit="CreateCustomer">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input id="name" class="form-control" @bind="newCustomer.CustomerName" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input id="email" class="form-control" @bind="newCustomer.Email" />
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">Phone</label>
                <input id="phone" class="form-control" @bind="newCustomer.ContactNumber" />
            </div>
            <div class="mb-3">
                <label for="address" class="form-label">Address</label>
                <textarea id="address" class="form-control" @bind="newCustomer.Address"></textarea>
            </div>
            <button class="btn btn-success" type="submit">Save</button>
            <button class="btn btn-secondary" type="button" @onclick="CancelForm">Cancel</button>
        </EditForm>
    </div>
}

<table class="table table-striped">
    
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th>Address</th>
            <th>Actions</th>
        </tr>
    </thead>

    <tbody>
        <!-- Customer Table -->
        @if (customers == null)
        {

            <tr>
                <td colspan="5" class="text-center">Loading customers ...</td>
            </tr>
        }
        else if (!customers.Any())
        {
            <tr>
                <td colspan="5" class="text-center">No customers found.</td>
            </tr>

        }
        else
        {

            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.CustomerName</td>
                    <td>@customer.Email</td>
                    <td>@customer.ContactNumber</td>
                    <td>@customer.Address</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => EditCustomer(customer)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCustomer(customer.CustomerID)">Delete</button>
                    </td>
                </tr>
            }


        }
    </tbody>
    </table>
@code {
    private List<Customer> customers;
    private Customer newCustomer = new Customer();
    private bool ShowForm = false;
    private string SearchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        // Load customers on initialization
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        customers = await CustomerService.GetCustomersAsync();
    }

    private void ShowCreateForm()
    {
        newCustomer = new Customer(); // Reset the form
        ShowForm = true;
    }

    private void CancelForm()
    {
        
        ShowForm = false;
    }

    private async Task CreateCustomer()
    {
        newCustomer.UserID = 1;
        await CustomerService.AddCustomerAsync(newCustomer);
        ShowForm = false;
        await LoadCustomers();
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            customers = customers; // Reset filter if search term is empty
        }
        else
        {
            customers = customers
                .Where(c => c.CustomerName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void EditCustomer(Customer customer)
    {
        newCustomer = customer; // Preload customer into form
        ShowForm = true;
    }

    private async Task DeleteCustomer(int customerId)
    {
        await CustomerService.DeleteCustomerAsync(customerId);
        await LoadCustomers();
    }
}
