@page "/Customer/Create"
@using EXONLOG.Model.Outbound
@using EXONLOG.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject EXONContext DbContext

<h3 class="text-primary">Create New Customer</h3>

<EditForm Model="customer" OnValidSubmit="HandleValidSubmit" FormName="Create">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="name" class="form-label">Name <span class="text-danger">*</span></label>
        <InputText id="name" class="form-control" @bind-Value="customer.Name" />
        <ValidationMessage For="() => customer.Name" class="text-danger" />
    </div>

    <div class="form-group mb-3">
        <label for="address" class="form-label">Address</label>
        <InputText id="address" class="form-control" @bind-Value="customer.Address" />
        <ValidationMessage For="() => customer.Address" class="text-danger" />
    </div>

    <div class="form-group mb-3">
        <label for="contactNumber" class="form-label">Contact Number</label>
        <InputText id="contactNumber" class="form-control" @bind-Value="customer.ContactNumber" />
        <ValidationMessage For="() => customer.ContactNumber" class="text-danger" />
    </div>

    <div class="form-group mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="customer.Email" />
        <ValidationMessage For="() => customer.Email" class="text-danger" />
    </div>

    <div class="form-group mb-3">
        <label for="notes" class="form-label">Notes</label>
        <InputTextArea id="notes" class="form-control" @bind-Value="customer.Notes" />
        <ValidationMessage For="() => customer.Notes" class="text-danger" />
    </div>
    <div class="form-group">
        <label for="UserID">User ID <span class="text-danger">*</span></label>
        <InputNumber id="UserID" class="form-control" @bind-Value="customer.UserID" />
        <ValidationMessage For="@(() => customer.UserID)" />
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
</EditForm>

@code {
    [SupplyParameterFromForm (FormName ="Create")]
    private Customer customer { set; get; } = new Customer();

    private async Task HandleValidSubmit()
    {
        if (ValidateCustomer())
        {
            //customer.CreateDate = DateTime.UtcNow;
            customer.UserID = GetCurrentUserId(); // Replace with actual method to get current user ID

            DbContext.Customers.Add(customer);
            await DbContext.SaveChangesAsync();
            int newCustomerId = customer.CustomerID;
            Navigation.NavigateTo($"/Customer/Details/{newCustomerId}");
        }
    }

    private bool ValidateCustomer()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(customer.Name))
        {
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(customer.Email))
        {
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(customer.ContactNumber) )
        {
            isValid = false;
        }

        return isValid;
    }

    private int GetCurrentUserId()
    {
        // TODO: Implement logic to retrieve the current user's ID
        return 1; // Placeholder for the default admin user
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/customers");
    }
}
