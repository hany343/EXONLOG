@page "/outlading"
@inject OutladingService outLadingService
@inject OrderService orderService
@inject DriverService driverService
@inject TruckService truckService
@inject ContractService contractService
@rendermode InteractiveServer


<PageTitle>OutLading Management</PageTitle>

<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">OutLading Management</h1>

    <!-- Add OutLading Button -->
    <button class="bg-blue-500 text-white px-4 py-2 rounded" @onclick="() => ShowAddOutLadingPopup = true">Add OutLading</button>

    <!-- Add OutLading Popup -->
    @if (ShowAddOutLadingPopup)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
            <div class="bg-white p-6 rounded shadow-xl w-1/2">
                <h2 class="text-xl font-bold mb-4">Add OutLading</h2>

                <div class="mb-4">
                    <label class="block font-medium">Contract</label>
                    <select class="w-full border rounded px-2 py-1" @onchange="OnContractChange">
                        <option value="">Select Contract</option>
                        @foreach (var contract in contracts)
                        {
                            <option value="@contract.ContractID">@contract.RefNumber</option>
                        }
                    </select>
                </div>

                @if (selectedContractID != null)
                {
                    <div class="mb-4">
                        <label class="block font-medium">Order</label>
                        <select class="w-full border rounded px-2 py-1" @bind="selectedOrderID">
                            <option value="">Select Order</option>
                            @foreach (var order in orders)
                            {
                                <option value="@order.OrderID">@order.OrderNumber</option>
                            }
                        </select>
                    </div>
                }

                <div class="mb-4">
                    <label class="block font-medium">Driver</label>
                    <input type="text" class="w-full border rounded px-2 py-1 mb-2" placeholder="Search by Name or National ID" @bind="driverSearchTerm" @oninput="SearchDrivers" />
                    <select class="w-full border rounded px-2 py-1" @bind="selectedDriverID">
                        <option value="">Select Driver</option>
                        @foreach (var driver in filteredDrivers)
                        {
                            <option value="@driver.DriverID">@driver.DriverName (@driver.NationalID)</option>
                        }
                    </select>
                </div>

                <div class="mb-4">
                    <label class="block font-medium">Truck</label>
                    <input type="text" class="w-full border rounded px-2 py-1 mb-2" placeholder="Search by Truck Number" @bind="truckSearchTerm" @oninput="SearchTrucks" />
                    <select class="w-full border rounded px-2 py-1" @bind="selectedTruckID">
                        <option value="">Select Truck</option>
                        @foreach (var truck in filteredTrucks)
                        {
                            <option value="@truck.TruckID">@truck.TruckNumber - @truck.TrailerNumber</option>
                        }
                    </select>
                </div>

                <div class="mb-4">
                    <label class="block font-medium">Lading Type</label>
                    <input type="text" class="w-full border rounded px-2 py-1" @bind="newOutLading.Type" />
                </div>

                <div class="mb-4">
                    <label class="block font-medium">Fill Type</label>
                    <input type="text" class="w-full border rounded px-2 py-1" @bind="newOutLading.FillType" />
                </div>

                <div class="mb-4">
                    <label class="block font-medium">Stack Bar</label>
                    <input type="text" class="w-full border rounded px-2 py-1" @bind="newOutLading.StackBar" />
                </div>

                <div class="mb-4">
                    <label class="block font-medium">Shipping Address</label>
                    <input type="text" class="w-full border rounded px-2 py-1" @bind="newOutLading.ShippingAddress" />
                </div>

                <div class="mb-4">
                    <label class="block font-medium">Shipping City</label>
                    <input type="text" class="w-full border rounded px-2 py-1" @bind="newOutLading.ShippingCity" />
                </div>

                <div class="flex justify-end">
                    <button class="bg-gray-500 text-white px-4 py-2 rounded mr-2" @onclick="() => ShowAddOutLadingPopup = false">Cancel</button>
                    <button class="bg-green-500 text-white px-4 py-2 rounded" @onclick="AddOutLading">Add</button>
                </div>
            </div>
        </div>
    }

    <!-- OutLading List -->
    <table class="table-auto w-full mt-4 border">
        <thead>
            <tr>
                <th class="border px-4 py-2">ID</th>
                <th class="border px-4 py-2">Order</th>
                <th class="border px-4 py-2">Driver</th>
                <th class="border px-4 py-2">Truck</th>
                <th class="border px-4 py-2">Lading Type</th>
                <th class="border px-4 py-2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var outLading in outLadings)
            {
                <tr>
                    <td class="border px-4 py-2">@outLading.LadingID</td>
                    <td class="border px-4 py-2">@outLading.Order?.OrderNumber</td>
                    <td class="border px-4 py-2">@outLading.Driver?.DriverName</td>
                    <td class="border px-4 py-2">@outLading.Truck?.TruckNumber</td>
                    <td class="border px-4 py-2">@outLading.Type</td>
                    <td class="border px-4 py-2">
                        <button class="bg-yellow-500 text-white px-2 py-1 rounded" @onclick="() => EditOutLading(outLading)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private bool ShowAddOutLadingPopup = false;
    private List<OutLading> outLadings = new();
    private List<Contract> contracts = new();
    private List<Order> orders = new();
    private List<Driver> drivers = new();
    private List<Truck> trucks = new();
    private List<Driver> filteredDrivers = new();
    private List<Truck> filteredTrucks = new();
    private int? selectedContractID;
    private int? selectedOrderID;
    private int? selectedDriverID;
    private int? selectedTruckID;
    private string driverSearchTerm = string.Empty;
    private string truckSearchTerm = string.Empty;
    private OutLading newOutLading = new();

    protected override async Task OnInitializedAsync()
    {
        contracts = await contractService.GetAllContractsAsync();
        drivers = await driverService.GetAllDriversAsync();
        trucks = await truckService.GetAllTrucksAsync();
        outLadings = await outLadingService.GetOutLadingsAsync();
        filteredDrivers = drivers;
        filteredTrucks = trucks;
    }

    private async Task OnContractChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int contractID))
        {
            selectedContractID = contractID;
            orders = await outLadingService.GetOrdersByContractAsync(contractID);
        }
        else
        {
            selectedContractID = null;
            orders.Clear();
        }
    }

    private void SearchDrivers(ChangeEventArgs e)
    {
        driverSearchTerm = e.Value?.ToString() ?? string.Empty;
        filteredDrivers = drivers.Where(d => d.DriverName.Contains(driverSearchTerm, StringComparison.OrdinalIgnoreCase) || d.NationalID.Contains(driverSearchTerm)).ToList();
    }

    private void SearchTrucks(ChangeEventArgs e)
    {
        truckSearchTerm = e.Value?.ToString() ?? string.Empty;
        filteredTrucks = trucks.Where(t => t.TruckNumber.Contains(truckSearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task AddOutLading()
    {
        if (selectedOrderID.HasValue && selectedDriverID.HasValue && selectedTruckID.HasValue)
        {
            newOutLading.OrderID = selectedOrderID.Value;
            newOutLading.DriverID = selectedDriverID.Value;
            newOutLading.TruckID = selectedTruckID.Value;
            await outLadingService.AddOutLadingAsync(newOutLading);
            outLadings = await outLadingService.GetOutLadingsAsync();
            ShowAddOutLadingPopup = false;
            newOutLading = new();
        }
    }

    private void EditOutLading(OutLading outLading)
    {
        ShowAddOutLadingPopup = true;
        newOutLading = outLading;
        selectedOrderID = outLading.OrderID;
        selectedDriverID = outLading.DriverID;
        selectedTruckID = outLading.TruckID;
    }
}

