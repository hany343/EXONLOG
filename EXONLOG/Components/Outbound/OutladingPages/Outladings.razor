@page "/outladings"

@inject OutladingService OutladingService
@inject ContractService contractService
@inject OrderService orderService
@inject DriverService driverService
@inject TruckService truckService
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<h3>Outladings</h3>

<button @onclick="ShowAddModal" class="btn btn-primary">Add Outlading</button>

<!-- Modal for adding new Outlading -->
<EditForm Model="NewOutlading" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="modal @(ShowModal ? "d-block" : "d-none")" role="dialog" aria-labelledby="modalTitle">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 id="modalTitle" class="modal-title">Add New Outlading</h5>
                    <button type="button" class="close" @onclick="CloseModal">&times;</button>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label>Contract</label>
                        <InputSelect Value="SelectedContractId" class="form-control" @onchange="e => OnContractChange(e)">
                            <option value="">Select Contract</option>
                            @foreach (var contract in contracts)
                            {
                                <option value="@contract.ContractID">@contract.ContractNumber</option>
                            }
                        </InputSelect>

                        <p>Selected Contract ID: @SelectedContractId</p>
                    </div>

                    <div class="form-group">
                        <label>Order</label>
                        <InputSelect @bind-Value="NewOutlading.OrderID" class="form-control">
                            <option value="">Select Order</option>
                            @foreach (var order in orders)
                            {
                                <option value="@order.OrderID">@order.OrderNumber</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label>Driver</label>
                        <InputSelect @bind-Value="NewOutlading.DriverID" class="form-control">
                            <option value="">Select Driver</option>
                            @foreach (var driver in drivers)
                            {
                                <option value="@driver.DriverID">@driver.DriverName</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label>Truck</label>
                        <InputSelect @bind-Value="NewOutlading.TruckID" class="form-control">
                            <option value="">Select Truck</option>
                            @foreach (var truck in trucks)
                            {
                                <option value="@truck.TruckID">@truck.TruckNumber</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label>Lading Type</label>
                        <InputSelect @bind-Value="NewOutlading.Type" class="form-control">
                            <option value="Inbound">Inbound</option>
                            <option value="Outbound">Outbound</option>
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <label>Quantity</label>
                        <InputNumber @bind-Value="NewOutlading.Quantity" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmSave">Save</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<!-- Table to display existing Outladings -->
<table class="table">
    <thead>
        <tr>
            <th>Lading ID</th>
            <th>Order</th>
            <th>Driver</th>
            <th>Truck</th>
            <th>Type</th>
            <th>Quantity</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var outlading in PagedOutladings)
        {
            <tr>
                <td>@outlading.LadingID</td>
                <td>@outlading.Order?.OrderNumber</td>
                <td>@outlading.Driver?.DriverName</td>
                <td>@outlading.Truck?.TruckNumber</td>
                <td>@outlading.Type</td>
                <td>@outlading.Quantity</td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="6">
                <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoBack)">Previous</button>
                <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
            </td>
        </tr>
    </tfoot>
</table>

@code {
    private bool ShowModal = false;
    private OutLading NewOutlading = new();
    private List<OutLading> outladings = new();
    private List<Contract> contracts = new();
    private List<Order> orders = new();
    private List<Driver> drivers = new();
    private List<Truck> trucks = new();
    private int SelectedContractId=0;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;

    private List<OutLading> PagedOutladings => outladings
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize)
        .ToList();

    private bool CanGoBack => currentPage > 1;
    private bool CanGoNext => currentPage * pageSize < outladings.Count;

    private void NextPage()
    {
        if (CanGoNext) currentPage++;
    }

    private void PreviousPage()
    {
        if (CanGoBack) currentPage--;
    }

    protected override async Task OnInitializedAsync()
    {
        outladings = await OutladingService.GetOutLadingsAsync();
        contracts = await contractService.GetAllContractsAsync();
        drivers = await driverService.GetAllDriversAsync();
        trucks = await truckService.GetAllTrucksAsync();
    }

    private async Task OnContractChange(ChangeEventArgs e)
    {
        Console.WriteLine($"Selected Contract ID: {SelectedContractId}");
        if (int.TryParse(e.Value?.ToString(), out int contractId))
        {
            SelectedContractId = contractId;
            orders = await orderService.GetOrdersByContractIdAsync(SelectedContractId);
        }
    }

    private void ShowAddModal()
    {
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        NewOutlading = new(); // Reset form
    }

    private async Task ConfirmSave()
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to save this outlading?"))
        {
            await HandleValidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        NewOutlading.UserID = 1; // Hardcoded for now
        NewOutlading.CreateDate = DateTime.UtcNow;
        await OutladingService.AddOutLadingAsync(NewOutlading);
        outladings = await OutladingService.GetOutLadingsAsync();
        CloseModal();
    }
}
