@page "/ContractsManagement"
@inject ContractService contractService
@inject MaterialService materialService

<PageTitle>Contract Management</PageTitle>

<div class="container mt-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>Contract Management</h3>
        <button class="btn btn-primary" @onclick="OpenCreateModal">
            + New Contract
        </button>
    </div>

    <!-- Search Bar -->
    <div class="mb-4">
        <input type="text" class="form-control" placeholder="Search contracts..."
               @bind="searchTerm" @bind:event="oninput" />
    </div>

    <!-- Create Modal -->
    @if (showCreateModal)
    {
        <CreateContract IsOpen="showCreateModal"
                        OnSave="HandleCreateSubmit"
                        OnCancel="CloseCreateModal" />
    }

    <!-- Edit Modal -->
    @if (showEditModal)
    {
        <EditContract Contract="selectedContract"
                      @bind-IsOpen="showEditModal"
                      OnSave="HandleEditSubmit"
                      OnCancel="CloseEditModal" />
    }

    <!-- Details Modal -->
    @if (showDetailsModal)
    {
        <ContractDetails Contract="selectedContract"
                         @bind-IsOpen="showDetailsModal" />
    }

    <!-- Contracts Table -->
    <ContractList Contracts="filteredContracts"
                  OnEdit="OpenEditModal"
                  OnDetails="OpenDetailsModal"
                  OnDelete="DeleteContract" />
</div>

@code {
    private List<Contract> contracts = new();
    private List<Contract> filteredContracts = new();
    private string searchTerm = string.Empty;
    private bool showCreateModal = false;
    private bool showEditModal = false;
    private Contract selectedContract = new();
    private bool showDetailsModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        contracts = await contractService.GetAllContractsAsync();
        FilterContracts();
    }

    private void FilterContracts()
    {
        filteredContracts = contracts
            .Where(c => string.IsNullOrEmpty(searchTerm) ||
                c.ContractNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void OpenCreateModal()
    {
        showCreateModal = true;
    }

    private async Task HandleCreateSubmit(Contract newContract)
    {
        try
        {
            await contractService.CreateContractAsync(newContract);
            await LoadData();
            showCreateModal = false;
        }
        catch (Exception)
        {

            throw;
        }
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
    }

    private void OpenEditModal(Contract contract)
    {
        selectedContract = contract;
        showEditModal = true;
    }

    private async Task HandleEditSubmit(Contract updatedContract)
    {
        await contractService.UpdateContractAsync(updatedContract);
        await LoadData();
        showEditModal = false;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedContract = new Contract();
    }

    private async Task DeleteContract(int id)
    {
        await contractService.DeleteContractAsync(id);
        await LoadData();
    }

    private void OpenDetailsModal(Contract contract)
    {
        selectedContract = contract;
        showDetailsModal = true;
    }
}