@page "/ContractsManage"
@using EXONLOG.Model.Outbound
@using EXONLOG.Model.Stocks
@using EXONLOG.Services
@inject ContractService contractService
@rendermode InteractiveServer

<div class="d-flex justify-content-between align-items-center mb-1">
    <h3>Contract Management</h3>
    <button class="btn btn-primary" @onclick="OpenCreateContractModal">+ New Contract</button>
</div>

<!-- Header Section -->
<div class=" d-flex justify-content-end ">
   
    <input class="form-control w-25 border-primary " placeholder="Search by Ref Number" @bind="filterRefNumber" @oninput="ApplyFilters" />
</div>

<!-- Filters Section -->
<div class="d-block ">
    <div class="row bg-secondary pb-1 justify-content-between">
        <div class="col-md-3">
            <label for="filterStartDate" class="form-label">Start Date</label>
            <input id="filterStartDate" type="date" class="form-control" @bind="filterStartDate" @oninput="ApplyFilters" />
        </div>
        <div class="col-md-3">
            <label for="filterEndDate" class="form-label">End Date</label>
            <input id="filterEndDate" type="date" class="form-control" @bind="filterEndDate" @oninput="ApplyFilters" />
        </div>
        <div class="col-md-3">
            <label for="filterMinQuantity" class="form-label">Min Quantity</label>
            <input id="filterMinQuantity" type="number" class="form-control" @bind="filterMinQuantity" @oninput="ApplyFilters" />
        </div>
        <div class="col-md-3">
            <label for="filterMaxQuantity" class="form-label">Max Quantity</label>
            <input id="filterMaxQuantity" type="number" class="form-control" @bind="filterMaxQuantity" @oninput="ApplyFilters" />
        </div>
    </div>
</div>

<!-- Contract Table -->
<ContractList Contracts="filteredContracts"
              OnEdit="OpenEditContractModal"
              OnDetails="OpenDetailsModal" />

<!-- Create Contract Modal -->
@if (isCreateContractModalOpen)
{
    <CreateEditContract @bind-IsOpen="isCreateContractModalOpen"
                        Contract="newContract"
                        Mode="Create"
                        OnSave="SaveContractAsync" />
}

<!-- Edit Contract Modal -->
@if (isEditContractModalOpen)
{
    <CreateEditContract @bind-IsOpen="isEditContractModalOpen"
                        Contract="editContract"
                        Mode="Edit"
                        OnSave="SaveEditedContractAsync" />
}

<!-- Details Modal -->
@if (isDetailsModalOpen)
{
    <ContractDetails @bind-IsOpen="isDetailsModalOpen"
                     Contract="detailsContract"
                     Mode="View" />
}

@code {
    private List<Contract>? contracts;
    private List<Contract> filteredContracts = new();
    private bool isCreateContractModalOpen = false;
    private bool isEditContractModalOpen = false;
    private bool isDetailsModalOpen = false;
    private Contract newContract = new();
    private Contract editContract;
    private Contract detailsContract;
    private string filterRefNumber;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private double? filterMinQuantity;
    private double? filterMaxQuantity;

    protected override async Task OnInitializedAsync()
    {
        contracts = await contractService.GetAllContractsAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredContracts = contracts?
            .Where(c => string.IsNullOrWhiteSpace(filterRefNumber) || c.RefNumber.Contains(filterRefNumber, StringComparison.OrdinalIgnoreCase))
            .Where(c => !filterStartDate.HasValue || c.StartDate >= filterStartDate)
            .Where(c => !filterEndDate.HasValue || c.Deadline <= filterEndDate)
            .Where(c => !filterMinQuantity.HasValue || c.Quantity >= filterMinQuantity)
            .Where(c => !filterMaxQuantity.HasValue || c.Quantity <= filterMaxQuantity)
            .ToList() ?? new();
    }

    private void OpenCreateContractModal()
    {
        newContract = new Contract();
        isCreateContractModalOpen = true;
    }

    private async Task SaveContractAsync()
    {
        newContract.UserID = 1; // Replace with current user's ID
        await contractService.AddContractAsync(newContract);
        contracts = await contractService.GetAllContractsAsync();
        ApplyFilters();
        isCreateContractModalOpen = false;
    }

    private void OpenEditContractModal(Contract contract)
    {
        editContract = contract;
        isEditContractModalOpen = true;
    }

    private async Task SaveEditedContractAsync()
    {
        await contractService.UpdateContractAsync(editContract);
        contracts = await contractService.GetAllContractsAsync();
        ApplyFilters();
        isEditContractModalOpen = false;
    }

    private void OpenDetailsModal(Contract contract)
    {
        detailsContract = contract;
        isDetailsModalOpen = true;
    }
}