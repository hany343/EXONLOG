@using EXONLOG.Model.Outbound
@using EXONLOG.Model.Stocks
@using Services
@inject CustomerService customerService
@inject MaterialService materialService

@if (IsOpen)
{
    <div class="modal show d-block mt-3">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Mode @("Contract")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Contract Number</label>
                            <input type="text" class="form-control" @bind="Contract.ContractNumber" placeholder="Enter contract number" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Customer</label>
                            <select class="form-select" @bind="Contract.CustomerID" @onfocus="LoadCustomersAsync">
                                <option value="">Select Customer</option>
                                @foreach (var customer in Customers)
                                {
                                    <option value="@customer.CustomerID">@customer.CustomerName</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Material</label>
                            <select class="form-select" @onfocus="LoadMaterialsAsync" @onchange="UpdateMaterialDetails">
                                <option value="">Select Material</option>
                                @foreach (var material in Materials)
                                {
                                    <option value="@material.MaterialID">@material.MaterialName</option>
                                }
                            </select>
                            @if (!string.IsNullOrEmpty(MaterialHint))
                            {
                                <small class="form-text text-muted">@MaterialHint</small>
                            }
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Quantity</label>
                            <input type="number" class="form-control" @bind="Contract.Quantity" placeholder="Enter quantity" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Start Date</label>
                            <input type="date" class="form-control" @bind="Contract.StartDate" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Deadline</label>
                            <input type="date" class="form-control" @bind="Contract.Deadline" />
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" rows="3" @bind="Contract.Notes" placeholder="Additional notes"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveAsync">Save</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public Contract Contract { get; set; }
    [Parameter] public string Mode { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }

    [Parameter] public List<Customer> Customers { get; set; } = new List<Customer>();
    [Parameter] public List<Material> Materials { get; set; } = new List<Material>();

    private string MaterialHint { get; set; }
    private bool allowSave = true;
    protected override async Task OnInitializedAsync()
    {
        // Ensure the initial selection displays the current contract's customer and material
        if (Contract.CustomerID != null && Contract.CustomerID > 0)
        {
            Customers = await customerService.GetCustomersAsync();
        }

        if (Contract.MaterialID != null && Contract.MaterialID > 0)
        {
            Materials = await materialService.GetMaterialsAsync();
            UpdateMaterialHint();
        }
    }

    private async Task LoadCustomersAsync()
    {
        if (Customers.Count == 0) // Load only if not already loaded
        {
            Customers = await customerService.GetCustomersAsync();
        }
    }

    private async Task LoadMaterialsAsync()
    {
        if (Materials.Count == 0) // Load only if not already loaded
        {
            Materials = await materialService.GetMaterialsAsync();
        }
    }

    private void UpdateMaterialDetails(ChangeEventArgs e)
    {
        var selectedMaterialId = int.Parse(e.Value.ToString() ?? "0");
        Contract.MaterialID = selectedMaterialId;
        double FreeQuantity = materialService.GetFreeQuantity(selectedMaterialId);

        
        UpdateMaterialHint();
    }

    private void UpdateMaterialHint()
    {
        var selectedMaterial = Materials.FirstOrDefault(m => m.MaterialID == Contract.MaterialID);
        var fqty = materialService.GetFreeQuantityAsync(selectedMaterial.MaterialID);
        MaterialHint = (selectedMaterial != null) ? $"Free Quantity: {fqty}": string.Empty;
    }

    private async Task SaveAsync()
    {
        await OnSave.InvokeAsync();
        await CloseModal();
    }

    private async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }
}
