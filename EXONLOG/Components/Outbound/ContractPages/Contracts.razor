@page "/Contracts"
@using EXONLOG.Model.Outbound
@using EXONLOG.Model.Stocks
@using EXONLOG.Services
@inject ContractService contractService
@rendermode InteractiveServer

<h3>Contract Management</h3>

<!-- Header Section -->
<div class="mb-3 d-flex justify-content-between align-items-center">
    <button class="btn btn-primary" @onclick="OpenCreateContractModal">Add</button>
    <input class="form-control w-25" placeholder="Search by Ref Number" @bind="filterRefNumber" @oninput="ApplyFilters" />
</div>

<!-- Filters Section -->
<div class="mb-3">
    <div class="row g-3 bg-secondary p-3">
        <div class="col-md-3">
            <label for="filterStartDate" class="form-label">Start Date</label>
            <input id="filterStartDate" type="date" class="form-control" @bind="filterStartDate" @oninput="ApplyFilters" />
        </div>
        <div class="col-md-3">
            <label for="filterEndDate" class="form-label">End Date</label>
            <input id="filterEndDate" type="date" class="form-control" @bind="filterEndDate" @oninput="ApplyFilters" />
        </div>
        <div class="col-md-3">
            <label for="filterMinQuantity" class="form-label">Min Quantity</label>
            <input id="filterMinQuantity" type="number" class="form-control" @bind="filterMinQuantity" @oninput="ApplyFilters" />
        </div>
        <div class="col-md-3">
            <label for="filterMaxQuantity" class="form-label">Max Quantity</label>
            <input id="filterMaxQuantity" type="number" class="form-control" @bind="filterMaxQuantity" @oninput="ApplyFilters" />
        </div>
    </div>
</div>

<!-- Contract Table -->
<table class="table table-striped">
    <thead class="bg-gradient">
        <tr>
            <th>ID</th>
            <th>Contract Number</th>
            <th>Customer</th>
            <th>Material</th>
            <th>Quantity</th>
            <th>Start Date</th>
            <th>Deadline</th>
            <th>Create Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (filteredContracts == null)
        {
            <tr>
                <td colspan="9" class="text-center">Loading contracts...</td>
            </tr>
        }
        else if (!filteredContracts.Any())
        {
            <tr>
                <td colspan="9" class="text-center">No contracts found.</td>
            </tr>
        }
        else
        {
            @foreach (var contract in filteredContracts)
            {
                <tr>
                    <td>@contract.ContractID</td>
                    <td>@contract.ContractNumber</td>
                    <td>@contract.Customer?.CustomerName</td>
                    <td>@contract.Material?.MaterialName</td>
                    <td>@contract.Quantity</td>
                    <td>@contract.StartDate?.ToShortDateString()</td>
                    <td>@contract.Deadline?.ToShortDateString()</td>
                    <td>@contract.CreateDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => OpenEditContractModal(contract)">Edit</button>
                        <button class="btn btn-sm btn-info" @onclick="() => OpenDetailsModal(contract)">Details</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (isCreateContractModalOpen)
{
    <CreateEditContract @bind-IsOpen="isCreateContractModalOpen"
                        Contract="newContract"
                        Mode="Create"
                        OnSave="SaveContractAsync" />
}

@if (isEditContractModalOpen)
{
    <CreateEditContract @bind-IsOpen="isEditContractModalOpen"
                        Contract="editContract"
                        Mode="Edit"
                        OnSave="SaveEditedContractAsync" />
}

@if (isDetailsModalOpen)
{
    <ContractDetails @bind-IsOpen="isDetailsModalOpen"
                     Contract="detailsContract"
                     Mode="View" />
}


@code {
    private List<Contract>? contracts;
    private List<Contract> filteredContracts;
    private bool isCreateContractModalOpen = false;
    private Contract newContract = new Contract();
    private string filterRefNumber;
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private double? filterMinQuantity;
    private double? filterMaxQuantity;
    private bool isEditContractModalOpen = false;
    private bool isDetailsModalOpen = false;
    private Contract editContract;
    private Contract detailsContract;

    private Material selectedMaterial;
    private double FreeQuantity;

    protected override async Task OnInitializedAsync()
    {
        contracts = await contractService.GetAllContractsAsync();

        ApplyFilters(); // Apply initial filters if any
    }

    private void ApplyFilters()
    {
        filteredContracts = contracts
            .Where(c => string.IsNullOrWhiteSpace(filterRefNumber) || c.RefNumber.Contains(filterRefNumber, StringComparison.OrdinalIgnoreCase))
            .Where(c => !filterStartDate.HasValue || c.StartDate >= filterStartDate)
            .Where(c => !filterEndDate.HasValue || c.Deadline <= filterEndDate)
            .Where(c => !filterMinQuantity.HasValue || c.Quantity >= filterMinQuantity)
            .Where(c => !filterMaxQuantity.HasValue || c.Quantity <= filterMaxQuantity)
            .ToList();

        Console.WriteLine($"Filtered Contracts Count: {filteredContracts.Count}"); // Debugging the filtered results
    }

    private void OpenCreateContractModal()
    {
        //ResetCreateContractForm();
        isCreateContractModalOpen = true;
    }

    private void CloseCreateContractModal()
    {
        isCreateContractModalOpen = false;
    }

    private void ResetCreateContractForm()
    {
        // Reset the newContract object
        newContract = new Contract
        {
            ContractNumber = string.Empty,
            CustomerID = 0, // You can set it to the default value or leave it uninitialized
            MaterialID = 0, // Same for MaterialID
            Quantity = 0,
            StartDate = DateTime.UtcNow,
            Deadline = DateTime.UtcNow.AddDays(30), // You can set this to a default date if needed
            Notes = string.Empty,
        };

        // Reset any other state if necessary
        selectedMaterial = null;
        FreeQuantity = 0;
    }


    private async Task SaveContractAsync()
    {

        newContract.UserID = 1; // Replace with current user's ID
       
        try
        {
            await contractService.AddContractAsync(newContract);
            contracts = await contractService.GetAllContractsAsync(); // Refresh contracts list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving contract: {ex.Message}");
        }
        ApplyFilters(); // Reapply filters after saving
        CloseCreateContractModal();
    }

    private async Task SaveEditedContractAsync()
    {
        await contractService.UpdateContractAsync(editContract);
        contracts = await contractService.GetAllContractsAsync(); // Refresh contracts list
        ApplyFilters(); // Reapply filters after editing
        CloseEditContractModal();
    }

    private void OpenEditContractModal(Contract contract)
    {
        editContract = contract;
        isEditContractModalOpen = true;
    }

    private void CloseEditContractModal()
    {
        isEditContractModalOpen = false;
        editContract = null;
    }

    private void OpenDetailsModal(Contract contract)
    {
        detailsContract = contract;
        isDetailsModalOpen = true;
    }

    private void CloseDetailsModal()
    {
        isDetailsModalOpen = false;
        detailsContract = null;
    }
}
