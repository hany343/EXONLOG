@page "/Stocks"
@using EXONLOG.Model.Stocks
@using EXONLOG.Services
@inject StockService stockService
@inject NavigationManager NavigationManager
@inject MaterialService materialService
@rendermode InteractiveServer
<h3>Manage Stocks</h3>

<div class="row">
    <div class="col-md-12">
        <div class="btn-toolbar mb-3">
            <button class="btn btn-primary me-2" @onclick="ShowCreateForm">New</button>
            <button class="btn btn-secondary me-2" @onclick="ShowDetails">Display Details</button>
            <!-- Add more buttons as needed -->
        </div>
    </div>
</div>

<div class="row">
    @if (showForm)
    {
        <div class="col-md-6">
            <h4>Stock Form</h4>
            <EditForm Model="currentStock" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="stockName">Stock Name</label>
                    <InputText id="stockName" class="form-control" @bind-Value="currentStock.StockName" />
                </div>

                <div class="form-group">
                    <label for="material">Material</label>
                    <InputSelect id="material" class="form-control" @bind-Value="currentStock.MaterialId">
                        <option value="">-- Select Material --</option>
                        @foreach (var material in materials)
                        {
                            <option value="@material.MaterialID">@material.MaterialName</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label for="location">Location</label>
                    <InputText id="location" class="form-control" @bind-Value="currentStock.Location" />
                </div>

                <div class="form-group">
                    <label for="quantity">Quantity</label>
                    <InputNumber id="quantity" class="form-control" @bind-Value="currentStock.Quantity" />
                </div>

                <div class="form-group">
                    <label for="notes">Notes</label>
                    <InputTextArea id="notes" class="form-control" @bind-Value="currentStock.Notes" />
                </div>

                <button type="submit" class="btn btn-primary">@((currentStock.StockID == 0) ? "Create" : "Update")</button>
                <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancel</button>
            </EditForm>
        </div>
    }

    <div class="col-md-12">
        <h4>Stocks List</h4>
        @if (stocks == null)
        {
            <p>Loading...</p>
        }
        else if (!stocks.Any())
        {
            <p>No stocks available.</p>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Stock Name</th>
                        <th>Material</th>
                        <th>Location</th>
                        <th>Quantity</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stock in stocks)
                    {
                        <tr>
                            <td>@stock.StockName</td>
                            <td>@stock.Material?.MaterialName</td>
                            <td>@stock.Location</td>
                            <td>@stock.Quantity</td>
                            <td>
                                <button class="btn btn-info btn-sm" @onclick="() => EditStock(stock)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteStock(stock.StockID)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<Stock> stocks;
    private List<Material> materials;
    private Stock currentStock = new Stock();
    private bool showForm = false;
    private int currentUser;

    protected override async Task OnInitializedAsync()
    {
        stocks = await stockService.GetAllStocksAsync();
        materials = await materialService.GetMaterialsAsync();
        currentUser = 1;// await UserService.GetCurrentUserNameAsync();
    }

    private async void ShowCreateForm()
    {
        currentStock = new Stock
        {
            Location = "Default Location",
            UserID = 1 //await UserService.GetCurrentUserIdAsync()
        };////
        showForm = true;
        StateHasChanged();
    }

    private void ShowDetails()
    {
        // Logic for displaying details can be added here
    }

    private async Task HandleValidSubmit()
    {
        if (currentStock.StockID == 0)
        {
            await stockService.CreateStockAsync(currentStock);
        }
        else
        {
            await stockService.UpdateStockAsync(currentStock);
        }

        stocks = await stockService.GetAllStocksAsync();
        ResetForm();
    }

    private void EditStock(Stock stock)
    {
        currentStock = stock;
        showForm = true;
    }

    private async Task DeleteStock(int stockId)
    {
        await stockService.DeleteStockAsync(stockId);
        stocks = await stockService.GetAllStocksAsync();
    }

    private void ResetForm()
    {
        currentStock = new Stock();
        showForm = false;
    }
}
