@page "/Materials/Create"
@using EXONLOG.Model.Shared
@using EXONLOG.Model.Account
@using EXONLOG.Data
@inject NavigationManager Navigation
@inject EXONContext DbContext
@inject MaterialTypeService typeService
@rendermode InteractiveServer

<h3>Create Material</h3>

<EditForm Model="material" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Material Name</label>
        <InputText class="form-control" id="name" @bind-Value="material.MaterialName" />
    </div>
    <div class="form-group">
        <label for="name">Prefix</label>
        <InputText class="form-control" id="prefix" @bind-Value="material.Prefix" />
    </div>

    <div class="form-group my-2">
        <label for="materialType">Material Type</label>

        <div class="d-flex justify-content-between">
            <div class="input-group">
                <InputSelect id="materialType" class="form-select" @bind-Value="material.MaterialTypeId">
                    <option value="">-- Select Material Type --</option>
                    @foreach (var type in MaterialTypes)
                    {
                        <option value="@type.MaterialTypeID">@type.MaterialTypeName</option>
                    }
                </InputSelect>

            </div>
            <div>
                @if (MaterialTypes.Count == 0)
                {
                    <button type="button" class="btn btn-primary" @onclick="ShowAddMaterialTypeModal">Add Type</button>
                }
            </div>
        </div>
    </div>

    <div>
        <label for="description">Description</label>
        <InputText class="form-control" id="description" @bind-Value="material.Description" />
    </div>

    <div>
        <label for="notes">Notes</label>
        <InputText class="form-control" id="notes" @bind-Value="material.Notes" />
    </div>

    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-primary m-1">Save</button>
        <button type="button" class="btn btn-secondary m-1" @onclick="NavigateBack">Cancel</button>
    </div>
</EditForm>


@if (showAddTypeModal)
{
    <MaterialTypeCreate Show="true" OnClose="CloseAddMaterialTypeModal" OnMaterialTypeCreated="RefreshMaterialTypes" />
}

@code {
    private Material material { set; get; } = new Material();
    private List<MaterialType> MaterialTypes = new();

    protected override async Task OnInitializedAsync()
    {
        MaterialTypes = await typeService.GetMaterialTypesAsync() ?? new List<MaterialType>();
    }


    private void NavigateBack() => Navigation.NavigateTo("/Materials/List");

    private async Task HandleValidSubmit()
    {
        if (Validatematerial())
        {
            material.UserID = GetCurrentUserId();
            try
            {
                DbContext.Materials.Add(material);
                await DbContext.SaveChangesAsync();
                int newmaterialId = material.MaterialID;
                Navigation.NavigateTo($"/Materials/Details/{newmaterialId}");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private bool Validatematerial()
    {
        bool isValid = true;
        if (string.IsNullOrWhiteSpace(material.MaterialName) || material.MaterialTypeId == null)
        {
            isValid = false;
        }
        return isValid;
    }

    private int GetCurrentUserId() => 1; // Placeholder for actual user ID logic

    private bool showAddTypeModal;

    private void ShowAddMaterialTypeModal()
    {
        showAddTypeModal = true;
    }

    private async Task CloseAddMaterialTypeModal()
    {
        showAddTypeModal = false;
        await RefreshMaterialTypes(); // Optional: refresh data after closing modal
    }

    private async Task RefreshMaterialTypes()
    {
        // Fetch updated material types
        MaterialTypes = await typeService.GetMaterialTypesAsync();
        showAddTypeModal = false;


    }
}
