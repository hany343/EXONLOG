@page "/Materials/MaterialTypeCreate"
@inject MaterialTypeService MaterialTypeService
@inject NavigationManager NavigationManager

@using Microsoft.EntityFrameworkCore
@using EXONLOG.Model.Shared


<EditForm Model="newMaterialType" OnValidSubmit="HandleValidSubmit" FormName="MaterialTypeForm">
    <h3>Create Material Type</h3>
    <div class="form-group">
        <label for="materialTypeName">Material Type Name</label>
        <InputText id="materialTypeName" class="form-control" @bind-Value="newMaterialType.MaterialTypeName" />
        <ValidationMessage For="@(() => newMaterialType.MaterialTypeName)" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" class="form-control" @bind-Value="newMaterialType.Description" />
        <ValidationMessage For="@(() => newMaterialType.Description)" />
    </div>

    <div class="form-group">
        <label for="notes">Notes</label>
        <InputText id="notes" class="form-control" @bind-Value="newMaterialType.Notes" />
        <ValidationMessage For="@(() => newMaterialType.Notes)" />
    </div>

    <button type="submit" class="btn btn-success">Create</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>


@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnMaterialTypeCreated { get; set; }

    [SupplyParameterFromForm(FormName = "MaterialTypeForm")]
    private MaterialType newMaterialType { set; get; } = new MaterialType();



    private async Task HandleValidSubmit()
    {
        try
        {
            newMaterialType.CreateDate = DateTime.UtcNow;
            newMaterialType.UserID = 1;// Replace with dynamic logic
            await MaterialTypeService.AddMaterialTypeAsync(newMaterialType);

            if (OnMaterialTypeCreated.HasDelegate)
            {
                await OnMaterialTypeCreated.InvokeAsync();
            }
            else
            {
                NavigationManager.NavigateTo("/materialtypes/list");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message); // Log error
        }
    }

    private async Task Cancel()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/materialtypes/list");
        }
    }
}
