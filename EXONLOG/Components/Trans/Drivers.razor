@page "/Drivers"
@using EXONLOG.Model.Trans
@using Services
@inject DriverService driverService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container mt-3">
    <h3>Manage Drivers</h3>

    <!-- Add Button -->
    <button class="btn btn-primary mb-3" @onclick="ShowAddDriverModal">Add Driver</button>

    <!-- Search Box -->
    <div class="mb-3 d-flex justify-content-end">
        <input type="text" class="form-control w-50" placeholder="Search by Name or National ID" @bind="searchText" @oninput="FilterDrivers" />
    </div>

    <!-- Drivers List -->
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Driver Name</th>
                <th>National ID</th>
                <th>License Number</th>
                <th>Contact</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredDrivers.Any())
            {
                @foreach (var driver in filteredDrivers)
                {
                    <tr>
                        <td>@driver.DriverName</td>
                        <td>@driver.NationalID</td>
                        <td>@driver.LicenseNumber</td>
                        <td>@driver.Contact</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditDriver(driver.DriverID)">Edit</button>
                            <button class="btn btn-sm btn-info me-2" @onclick="() => ViewDriverDetails(driver.DriverID)">Details</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteDriver(driver.DriverID)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No drivers found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Add/Edit Driver Modal -->
@if (isDriverModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseDriverModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="selectedDriver" OnValidSubmit="SaveDriver">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Driver Name</label>
                            <input type="text" class="form-control" @bind="selectedDriver.DriverName" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">National ID</label>
                            <input type="text" class="form-control" @bind="selectedDriver.NationalID" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">License Number</label>
                            <input type="text" class="form-control" @bind="selectedDriver.LicenseNumber" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contact</label>
                            <input type="text" class="form-control" @bind="selectedDriver.Contact" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Address</label>
                            <input type="text" class="form-control" @bind="selectedDriver.Address" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" @bind="selectedDriver.Notes"></textarea>
                        </div>

                        <button type="submit" class="btn btn-success">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseDriverModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Driver> drivers = new();
    private List<Driver> filteredDrivers = new();
    private Driver selectedDriver = new();
    private string searchText = string.Empty;
    private bool isDriverModalVisible = false;
    private string modalTitle = "Add Driver";

    protected override async Task OnInitializedAsync()
    {
        await LoadDrivers();
    }

    private async Task LoadDrivers()
    {
        drivers = await driverService.GetAllDriversAsync();
        filteredDrivers = drivers;
    }

    private async void FilterDrivers()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredDrivers = drivers;
        }
        else
        {
            filteredDrivers = drivers.Where(d =>
                d.DriverName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrWhiteSpace(d.NationalID) && d.NationalID.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
                .ToList();

            await InvokeAsync(StateHasChanged);
        }
    }

    private void ShowAddDriverModal()
    {
        selectedDriver = new Driver();
        modalTitle = "Add Driver";
        isDriverModalVisible = true;
    }

    private void EditDriver(int driverId)
    {
        selectedDriver = drivers.FirstOrDefault(d => d.DriverID == driverId) ?? new Driver();
        modalTitle = "Edit Driver";
        isDriverModalVisible = true;
    }

    private async Task SaveDriver()
    {
        selectedDriver.UserID = 1;
        if (selectedDriver.DriverID == 0)
        {
            await driverService.AddDriverAsync(selectedDriver);
        }
        else
        {
            await driverService.UpdateDriverAsync(selectedDriver);
        }

        isDriverModalVisible = false;
        await LoadDrivers();
    }

    private void ViewDriverDetails(int driverId)
    {
        var driver = drivers.FirstOrDefault(d => d.DriverID == driverId);
        if (driver != null)
        {
            // Display driver details (implementation can vary)
            JSRuntime.InvokeVoidAsync("alert", $"Driver: {driver.DriverName}\nContact: {driver.Contact}");
        }
    }

    private async Task DeleteDriver(int driverId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this driver?");
        if (confirmed)
        {
            await driverService.DeleteDriverAsync(driverId);
            await LoadDrivers();
        }
    }

    private void CloseDriverModal()
    {
        isDriverModalVisible = false;
    }
}
