@page "/Drivers"
@using Services
@using EXONLOG.Model.Trans
@inject DriverService driverService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container mt-3">
    <h3>Manage Drivers</h3>

    <!-- Add Button to Open the Create Driver Form (Modal) -->
    <button class="btn btn-primary" @onclick="ShowModal">Add Driver</button>

    <!-- Search Box for Driver Name or National ID -->
    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Search Driver by Name or National ID" @bind="SearchDriver" @oninput="FilterDrivers" />
    </div>

    <!-- List of Drivers -->
    <div>
        <h4>Driver List</h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>National ID</th>
                    <th>License Number</th>
                    <th>Contact</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var driver in FilteredDrivers)
                {
                    <tr>
                        <td>@driver.DriverName</td>
                        <td>@driver.NationalID</td>
                        <td>@driver.LicenseNumber</td>
                        <td>@driver.Contact</td>
                        <td>
                            <button class="btn btn-info" @onclick="() => ShowEditDriverForm(driver.DriverID)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteDriver(driver.DriverID)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Modal for Creating or Editing Driver -->
    <div class="modal fade @(isModalVisible ? "show" : "")" tabindex="-1" role="dialog" aria-labelledby="createDriverModalLabel" aria-hidden="@(isModalVisible ? "false" : "true")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createDriverModalLabel">Create Driver</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newDriver" OnValidSubmit="SaveDriver">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Driver Name</label>
                            <input type="text" class="form-control" @bind="newDriver.DriverName" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">National ID</label>
                            <input type="text" class="form-control" @bind="newDriver.NationalID" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">License Number</label>
                            <input type="text" class="form-control" @bind="newDriver.LicenseNumber" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contact</label>
                            <input type="text" class="form-control" @bind="newDriver.Contact" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Address</label>
                            <input type="text" class="form-control" @bind="newDriver.Address" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <input type="text" class="form-control" @bind="newDriver.Notes" />
                        </div>

                        <!-- Image Upload -->
                        <div class="mb-3">
                            <label class="form-label">Driver Image</label>
                            <div class="d-flex">
                                <input type="file" class="form-control" accept="image/*" @onchange="OnInputFileChange" />
                                <button type="button" class="btn btn-secondary ms-2" @onclick="OpenCameraModal">Use Camera</button>
                            </div>
                            <div class="mt-3">
                                @if (!string.IsNullOrEmpty(imagePreview))
                                {
                                    <img src="@imagePreview" alt="Driver Image" style="max-width: 200px; max-height: 200px;" />
                                }
                            </div>
                        </div>

                        <button type="submit" class="btn btn-success">Save Driver</button>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveDriver">Save</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Camera Capture Modal -->
    <div class="modal fade" id="cameraModal" tabindex="-1" aria-labelledby="cameraModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cameraModalLabel">Capture Driver Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <video id="videoElement" width="100%" height="auto" autoplay></video>
                    <canvas id="canvasElement" style="display: none;"></canvas>
                    <button class="btn btn-primary mt-2" @onclick="CapturePhoto">Capture Photo</button>
                    <button class="btn btn-success mt-2" @onclick="ConfirmCapturedPhoto">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? SearchDriver;
    private List<Driver> drivers = new();
    private List<Driver> FilteredDrivers = new();
    private Driver newDriver = new Driver();
    private string? imagePreview;

    private ElementReference videoElement;
    private ElementReference canvasElement;

    // Flag to control modal visibility
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // Load all drivers initially
        drivers = await driverService.GetAllDriversAsync();
        FilteredDrivers = drivers;
    }

    private void FilterDrivers()
    {
        if (string.IsNullOrWhiteSpace(SearchDriver))
        {
            FilteredDrivers = drivers;
        }
        else
        {
            FilteredDrivers = drivers
                .Where(d => d.DriverName.Contains(SearchDriver, StringComparison.OrdinalIgnoreCase) || d.NationalID.Contains(SearchDriver, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task ShowCreateDriverForm()
    {
        newDriver = new Driver(); // Reset form data for new driver
        isModalVisible = true; // Show the modal via C#
    }

    private async Task ShowEditDriverForm(int driverId)
    {
        newDriver = await driverService.GetDriverByIdAsync(driverId);
        isModalVisible = true; // Show the modal via C#
    }

    private async Task SaveDriver()
    {
        if (newDriver.DriverID == 0)
        {
            // Add new driver
            await driverService.AddDriverAsync(newDriver);
        }
        else
        {
            // Update existing driver
            await driverService.UpdateDriverAsync(newDriver);
        }

        // Close the modal after saving
        isModalVisible = false;
        // Optionally, display success message
    }

    private async Task DeleteDriver(int driverId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this driver?");
        if (confirmed)
        {
            await driverService.DeleteDriverAsync(driverId);
            // Optionally, refresh the list of drivers
        }
    }

    private async Task OnInputFileChange(ChangeEventArgs e)
    {
        var file = (e.Value as IEnumerable<IBrowserFile>)?.FirstOrDefault();
        if (file != null)
        {
            // Get the file content as a base64 string
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            imagePreview = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private async Task OpenCameraModal()
    {
        // Use JSInterop for Camera Modal
        isModalVisible = false;
        await JSRuntime.InvokeVoidAsync("openCameraModal");
    }

    private async Task CapturePhoto()
    {
        // Capture the photo using JavaScript
        await JSRuntime.InvokeVoidAsync("capturePhoto", videoElement, canvasElement);
        imagePreview = await JSRuntime.InvokeAsync<string>("getCanvasImageData");
    }

    private void ConfirmCapturedPhoto()
    {
        // Set the captured photo as the driver's image
        newDriver.Image = Convert.FromBase64String(imagePreview);
        isModalVisible = true; // Close the camera modal and show the driver modal
    }
    
    private void ShowModal()
    {
        isModalVisible = true;
    }
    private void CloseModal()
    {
        isModalVisible = false;
    }
}
